<?php

/**
 * @file
 * Enables Symfony's Dependency Injection Component.
 */

use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Dumper\PhpDumper;

/**
 * Implements hook_boot().
 */
function inject_boot() {
  inject_register();

  if (variable_get('inject_dump', TRUE)) {
    // This is the last module (weight=1000) to be booted, load the cached
    // version of the container in order to allow hook_init() to alleviate
    // dependency injection.
    require_once inject_file();
    drupal_container(new CachedContainer());
  }
  else {
    // The cached version of the container does not exist, trigger a rebuild.
    // Note: this operation is expensive and configuration should be dumped in
    // production sites.
    inject_rebuild();
  }
}

/**
 * Implements hook_form_system_performance_settings_alter().
 */
function inject_form_system_performance_settings_alter(&$form, $form_state) {
  drupal_add_js(drupal_get_path('module', 'inject') . '/inject.js');
  // Add JS to enable / disable the 'Compile configuration' checkbox.
  drupal_add_js('jQuery(function () { Drupal.enableCompileConfigurationCheckbox(); });', 'inline');

  $form['inject'] = array(
    '#type' => 'fieldset',
    '#title' => t('Dependency Injection Container'),
    '#description' => t('Dumping the configuration can enhance performances, by compiling, dumping and caching the resulting file to disk.')
  );

  $file_exists = file_exists(inject_folder());
  $form['inject']['inject_dump'] = array(
    '#type' => 'checkbox',
    '#title' => t('Dump configuration to disk.'),
    '#default_value' => variable_get('inject_dump', TRUE) && $file_exists,
    '#disabled' => !$file_exists,
  );

  $dump_config = $form['inject']['inject_dump']['#default_value'];
  $form['inject']['inject_compile'] = array(
    '#type' => 'checkbox',
    '#title' => t('Compile configuration.'),
    '#default_value' => variable_get('inject_compile', FALSE) && $dump_config,
    '#disabled' => !$dump_config
  );

  $form['#submit'][] = 'inject_form_system_performance_settings_submit';
}

/**
 * Submits inject_form_system_performance_settings_alter() form.
 */
function inject_form_system_performance_settings_submit($form, &$form_state) {
  $form_dump = $form['inject']['inject_dump'];
  if ($form_dump['#default_value'] == 0 && $form_dump['#value'] == 1) {
    inject_rebuild();
  }
}

/**
 * Tells drupal to dump the container on page exit.
 */
function inject_needs_dumping() {
  global $conf;
  // By-pass the db_merge request.
  $conf['inject_needs_dumping'] = variable_get('inject_dump', TRUE);
}

/**
 * Re-build the dependency injection container.
 */
function inject_rebuild() {
  // Configures the dependency injection container.
  drupal_container($container = new ContainerBuilder());
  module_invoke_all('container', $container);
  inject_needs_dumping();
}

function inject_folder() {
  return conf_path() . '/files/inject';
}

function inject_file() {
  return conf_path() . '/files/inject/container.php';
}
/**
 * Implements hook_exit().
 */
function inject_exit() {
  // If the container needs to be dumped.
  if (variable_get('inject_needs_dumping', FALSE)) {
    $container = drupal_container();

    if (variable_get('inject_compile', FALSE)) {
      // If Compile configuration is checked, compiles the container.
      $container->compile();
    }

    $dumper = new PhpDumper($container);
    file_put_contents(
      inject_file(),
      $dumper->dump(array('class' => 'CachedContainer'))
    );
  }
}

/**
 * Implements hook_flush_caches().
 */
function inject_flush_caches() {
  inject_register();
  inject_rebuild();
  return array();
}

/**
 * Registers the Dependency Injection name-space with the class-loader.
 */
function inject_register() {
  // Activates the class loader.
  drupal_classloader()->registerNamespace('Symfony\Component\DependencyInjection', __DIR__ . '/vendor/symfony/dependency-injection');
}

/**
 * Retrieves the Drupal Container to standardize object construction.
 *
 * @param Symfony\Component\DependencyInjection\ContainerInterface $new_container
 *   (optional) A new container instance to replace the current.
 *
 * @return Symfony\Component\DependencyInjection\ContainerInterface|bool
 *   The instance of the ContainerInterface used to set up and maintain
 *   object instances or FALSE if none exist yet.
 */
function drupal_container(ContainerInterface $new_container = NULL) {
  // We do not use drupal_static() here because we do not have a mechanism by
  // which to reinitialize the stored objects, so a drupal_static_reset() call
  // would leave Drupal in a nonfunctional state.
  static $container;
  if (isset($new_container)) {
    $container = $new_container;
  }
  return $container;
}
